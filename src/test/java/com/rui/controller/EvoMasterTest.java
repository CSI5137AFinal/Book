import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import static org.evomaster.client.java.controller.db.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import  java.util.List;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
 * This file was automatically generated by EvoMaster on 2020-12-21T22:29:38.620303+08:00[Asia/Shanghai]
 * <br>
 * The generated test suite contains 5 tests
 * <br>
 * Covered targets: 43
 * <br>
 * Used time: 0h 0m 20s
 * <br>
 * Needed budget for current results: 36%
 * <br>
 * 
 */
public class EvoMasterTest {

    
    private static final SutHandler controller = new com.rui.Driver.EMDriver();
    private static String baseUrlOfSut;
    
    
    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @BeforeEach
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test
    public void test_0() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/book/findAll")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0))
                .body("isEmpty()", is(true));
    }
    
    
    @Test
    public void test_1() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("BOOK", 1L)
            .and().insertInto("BOOK", 0L)
            .dtos();
        controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/api/book/deleteById/802")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("")
                .body(isEmptyOrNullString());
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/book/findAll")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("'id'", hasItem(numberMatches(1.0)))
                .body("'name'", hasItem(nullValue()))
                .body("'author'", hasItem(nullValue()))
                .body("'id'", hasItem(numberMatches(2.0)))
                .body("'name'", hasItem(nullValue()))
                .body("'author'", hasItem(nullValue()));
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/api/book/deleteById/730")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("")
                .body(isEmptyOrNullString());
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"author\": \"xpYpH2DEZa\", " + 
                    " \"id\": 224.0, " + 
                    " \"name\": \"oj1m48bvr97\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/book/save")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("")
                .body(isEmptyOrNullString());
    }
    
    
    @Test
    public void test_2() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"krAbQ_5\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/book/save")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("")
                .body(isEmptyOrNullString());
    }
    
    
    @Test
    public void test_3() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/book/findById/832")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("")
                .body(isEmptyOrNullString());
    }
    
    
    @Test
    public void test_4() throws Exception {
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/api/book/deleteById/899")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("")
                .body(isEmptyOrNullString());
    }


}
